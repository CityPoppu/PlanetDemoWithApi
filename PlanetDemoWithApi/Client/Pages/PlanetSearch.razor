@page "/planetsearch"
@using PlanetDemoWithApi.Shared
@using PlanetDemoWithApi.Client.Services;
@using System.Web;
@inject HttpClient Http
@inject PlanetService PlanetService
@inject NavigationManager NavigationManager

<PageTitle>Planet Search</PageTitle>

<h1>Planets of the Solar System</h1>

<p>Search for a planet by name, or properties</p>

<div class="row">
    <div class="col-md-2">
        <input class="form-control" placeholder="Enter Planet Name" @bind-value="nameSearch" />
    </div>
    <div class="col-md-10">
        <button class="btn-success" @onclick="PerformNameSearch">
            Search for planet by Name
        </button>
    </div>
</div>

<text>&nbsp;</text>

<div class="row">
    <div class="col-md-2">
        <input class="form-control" placeholder="Number of Moons" type="number" @bind-value="moonSearch" />
    </div>
    <div class="col-md-2">
        <select class="form-control" @bind="@classificationSearch">
            <option value="">Select a classification...</option>
            @foreach (var classification in classifications)
            {
                <option value="@classification"> @classification </option>
            }
        </select>
    </div>
    <div class="col-md-8">
        <button class="btn-success" @onclick="PerformPropertySearch">
            Search for planet by Property
        </button>
    </div>
</div>

<text>&nbsp;</text>

@if (planets == null || planets.Count == 0)
{
    <p><em>@responseText</em></p>
}
else
{
    foreach(var planet in planets)
    {
        <PartialPlanet Planet="planet"/>
    }
}

@code {
    private List<Planet> planets = new List<Planet>();
    private string? responseText;

    private string? nameSearch;
    private string? classificationSearch;
    private int? moonSearch;

    private List<string> classifications = new List<string> { "Dwarf Planet", "Gas Giant", "Ice Giant", "Terrestial Planet"};

    protected override async Task OnInitializedAsync()
    {
        responseText = "If any planets match the search criteria, they will appear below!";
        StateHasChanged();
    }

    private async Task PerformNameSearch()
    {
        planets.Clear();
        classificationSearch = null;
        moonSearch = null;

        var result = new Planet();


        if (!String.IsNullOrEmpty(nameSearch))
        {
            try
            {
                result = await PlanetService.GetPlanetByNameAsync(new Uri(NavigationManager.BaseUri), nameSearch);
            }

            catch (HttpRequestException e)
            {
                responseText = "Sorry, no Planets were found with that name!";
                StateHasChanged();
            }
        }
        StateHasChanged();
    }

    private async Task PerformPropertySearch()
    {
        planets.Clear();
        nameSearch = null;
        StateHasChanged();

        try
        {
            var planets = await PlanetService.GetPlanetsByPropertyAsync(new Uri(NavigationManager.BaseUri), nameSearch, moonSearch);           
        }
        
        catch (HttpRequestException e)
        {
            responseText = "Sorry, no Planets were found with those properties!";
            StateHasChanged();
        }

        StateHasChanged();
    }

}
